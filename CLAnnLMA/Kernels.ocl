#define TRUE 1
#define FALSE 0
#define DEBUG TRUE


#if CLNetPrecisionDouble
	#define CLNetDataType double
#else
	#define	CLNetDataType float
#endif

//#if CLNetDataType == double
//	#pragma OPENCL EXTENSION cl_khr_fp64 : enable
//#endif

__kernel void arrayMemSet(__global CLNetDataType * restrict array, uint elements, CLNetDataType value)
{
	const uint id = get_global_id(0);
	if (id < elements) {
		array[id] = value;
	}
}

__kernel void linear(__global CLNetDataType * restrict derivativeMatrix,
					 __global CLNetDataType * restrict activatedMatrix,
					 __global const CLNetDataType * restrict valuesMatrix,
					 uint elements)
{
	uint x = get_global_id(0);
	if (x >= elements) return;

	activatedMatrix[x] = valuesMatrix[x];
	derivativeMatrix[x] = 1;
}

__kernel void sigmoid(__global CLNetDataType * restrict derivativeMatrix,
					  __global CLNetDataType * restrict activatedMatrix,
					  __global const CLNetDataType * restrict valuesMatrix,
					  uint elements)
{
	uint x = get_global_id(0);
	if (x >= elements) return;

	CLNetDataType value = 1 / (1 + exp(- valuesMatrix[x]));
	activatedMatrix[x] = value;
	derivativeMatrix[x] = value * (1 - value);
}

__kernel void tansig(__global CLNetDataType * restrict derivativeMatrix,
					 __global CLNetDataType * restrict activatedMatrix,
					 __global const CLNetDataType * restrict valuesMatrix,
					 uint elements)
{
	uint x = get_global_id(0);
	if (x >= elements) return;

	CLNetDataType value = tanh(valuesMatrix[x]);
	activatedMatrix[x] = value;
	derivativeMatrix[x] = 1 - value * value;
}

__kernel void radbas(__global CLNetDataType * restrict derivativeMatrix,
					 __global CLNetDataType * restrict activatedMatrix,
					 __global const CLNetDataType * restrict valuesMatrix,
					 uint elements)
{
	uint x = get_global_id(0);
	if (x >= elements) return;

	CLNetDataType val = valuesMatrix[x];
	CLNetDataType value = exp(-val * val);
	activatedMatrix[x] = value;
	derivativeMatrix[x] = -2 * value * val;
}

//Chi Squared
static void inline reduceInline(uint localId, __global CLNetDataType * restrict partialSums, __local CLNetDataType * localSums)
{
	barrier(CLK_LOCAL_MEM_FENCE);

	for (uint stride = get_local_size(0) / 2; stride > 0; stride /= 2) {

		if (localId < stride) {
			localSums[localId] += localSums[localId + stride];
		}
		barrier(CLK_LOCAL_MEM_FENCE);
	}

	if (localId == 0) {
		partialSums[get_group_id(0)] = localSums[0];
	}
}

static CLNetDataType inline res(CLNetDataType fy, CLNetDataType y)
{
	CLNetDataType r = fy - y;
	return r * r;
}

__kernel void chiSquared(__global const CLNetDataType * restrict fy, __global const CLNetDataType * restrict y,
						 __local CLNetDataType * localSums, __global CLNetDataType * restrict partialSums, uint n)
{
	uint globalId = get_global_id(0);
	uint localId  = get_local_id(0);
	uint index = get_group_id(0) * get_local_size(0) + localId;

	localSums[localId] = (index < n) ? res(fy[globalId], y[globalId]) : 0;
	reduceInline(localId, partialSums, localSums);
}

__kernel void chiSquaredReduce(__global CLNetDataType * restrict partialSums, __local CLNetDataType * localSums)
{
	uint localId  = get_local_id(0);
	localSums[localId] = partialSums[get_global_id(0)];
	reduceInline(localId, partialSums, localSums);
}

__kernel void jacobianDiagonal(__global CLNetDataType * restrict jacobian,
							   uint offsetJacobian,
							   uint rowsJacobian, uint columnsJacobian,
							   __global const CLNetDataType * restrict values,
							   uint columnsValues, uint dimDiag)
{
	uint x = get_global_id(1);
	uint xDiag = x / dimDiag;
	uint y_old = get_global_id(0);
	uint y = y_old + offsetJacobian;
	uint yDiag = y_old / dimDiag;

	if (x >= rowsJacobian || y >= columnsJacobian) return;

	CLNetDataType value = values[xDiag * columnsValues + yDiag];
	jacobian[x * columnsJacobian + y] = ((x - xDiag * dimDiag) == (y_old - yDiag * dimDiag)) * value;
}

__kernel void jacobianMultiply(__global CLNetDataType * restrict jacobian,
							   uint elementsJacobian, uint columnsJacobian,
							   __global const CLNetDataType * restrict values)
{
	uint x = get_global_id(0);
	if (x >= elementsJacobian) return;
	jacobian[x] *= values[x / columnsJacobian];
}

__kernel void updateDiagonal(__global CLNetDataType * restrict matrix, uint dim, CLNetDataType mult)
{
	uint x = get_global_id(0);
	if (x < dim) {
		matrix[x * dim + x] = matrix[x * dim + x] * mult;
	}
}


//#define TOL 1e-30
//#define a(r, c) a[(r * npar + c)]
//#define l(r, c) l[(r * npar + c)]
//
//__kernel void choleskyDecomposition(__global CLNetDataType * restrict l,
//									__global CLNetDataType * restrict a,
//									__global CLNetDataType * sums, uint npar, __global uint * ill, uint x)
//{
//	uint y = get_global_id(0);
//
//	if (ill[0] == 1 || y >= npar) {
//		return;
//	}
//
//	CLNetDataType diag = a(x, x) - sums[x];
//
//	if (diag < TOL) {
//		ill[0] = 1;
//		return;
//	}
//
//	diag = sqrt(diag);
//
//	if (y > x) {
//		CLNetDataType sum = a(x, y);
//		for (uint k = 0; k < x; ++k) {
//			sum -= l(k, x) * l(k, y);
//		}
//		sum /= diag;
//		l(x, y) = sum;
//		sums[y] += sum * sum;
//	}
//
//	if (y == x) {
//		l(x, x) = diag;
//	}
//}

#define TOL 1e-30
#define A(r, c) A[(r * columns + c)]
#define L(r, c) L[(r * columns + c)]

__kernel void choleskyDecomposition(__global CLNetDataType * restrict L,
									__global CLNetDataType * restrict A,
									__global CLNetDataType * sums, uint columns,
									__global int * ill, uint x)
{
	uint y = get_global_id(0);

	if (ill[0] >= 0 || y >= columns) return;

	CLNetDataType diag = A(x, x) - sums[x];
	if (diag < TOL) {
		ill[0] = x;
		return;
	}
	diag = sqrt(diag);

	if (y > x) {
		CLNetDataType sum = A(x, y);
		for (uint k = 0; k < x; ++k) {
			sum -= L(k, x) * L(k, y);
		}
		sum /= diag;
		L(x, y) = sum;
		sums[y] += sum * sum;
	}

	if (y == x) L(x, x) = diag;
}
